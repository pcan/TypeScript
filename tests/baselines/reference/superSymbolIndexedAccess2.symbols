=== tests/cases/conformance/expressions/superPropertyAccess/superSymbolIndexedAccess2.ts ===

class Foo {
>Foo : Symbol(Foo, Decl(superSymbolIndexedAccess2.ts, 0, 0))

    [Symbol.isConcatSpreadable]() {
>Symbol.isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.d.ts, --, --))

        return 0;
    }
}

class Bar extends Foo {
>Bar : Symbol(Bar, Decl(superSymbolIndexedAccess2.ts, 5, 1))
>Foo : Symbol(Foo, Decl(superSymbolIndexedAccess2.ts, 0, 0))

    [Symbol.isConcatSpreadable]() {
>Symbol.isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.d.ts, --, --))

        return super[Symbol.isConcatSpreadable]();
>super : Symbol(Foo, Decl(superSymbolIndexedAccess2.ts, 0, 0))
>Symbol.isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.d.ts, --, --), Decl(lib.d.ts, --, --))
>isConcatSpreadable : Symbol(SymbolConstructor.isConcatSpreadable, Decl(lib.d.ts, --, --))
    }
}
